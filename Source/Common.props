<Project>
    <PropertyGroup>
        <Product>$(ModName)</Product>
        <AssemblyName>$(ModFileName)</AssemblyName>
        <RootNamespace>$(ModFileName)</RootNamespace>
        <Company>Trojan</Company>
        <Authors>Ian Goforth</Authors>
        <Copyright>Copyright Ian Goforth</Copyright>

        <Version>$(ModVersion)</Version>
        <FileVersion>$(ModVersion)</FileVersion>
        <PackageVersion>$(ModVersion)</PackageVersion>
        <AssemblyVersion>$(ModVersion)</AssemblyVersion>
        <InformationalVersion>$(ModVersion)</InformationalVersion>

        <RepositoryUrl>$(Repository)</RepositoryUrl>
        <PackageProjectUrl>$(Repository)</PackageProjectUrl>
        <PublishRepositoryUrl>true</PublishRepositoryUrl>

        <TargetFrameworks>net472</TargetFrameworks>
        <PlatformTarget>x64</PlatformTarget>

        <LangVersion>latest</LangVersion>
        <Nullable>enable</Nullable>
        <WarningsAsErrors>nullable</WarningsAsErrors>
        <ImplicitUsings>enable</ImplicitUsings>
        <EnableFileScopedNamespaces>true</EnableFileScopedNamespaces>
        <AnalysisLevel>latest</AnalysisLevel>
        <EnableNETAnalyzers>true</EnableNETAnalyzers>
        <AnalysisMode>AllEnabledByDefault</AnalysisMode>
        <TreatWarningsAsErrors>true</TreatWarningsAsErrors>

        <DebugType>embedded</DebugType>
        <ContinuousIntegrationBuild>true</ContinuousIntegrationBuild>
        <Deterministic>true</Deterministic>
        <GenerateDocumentationFile>true</GenerateDocumentationFile>
        <EmbedUntrackedSources>true</EmbedUntrackedSources>
        <GenerateSupportedRuntime>false</GenerateSupportedRuntime>
        <EnableDefaultCompileItems>false</EnableDefaultCompileItems>
        <AutoGenerateBindingRedirects>false</AutoGenerateBindingRedirects>
        <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
        <GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>
        <DisableImplicitFrameworkReferences>true</DisableImplicitFrameworkReferences>

        <CollectCoverage>true</CollectCoverage>
        <CoverletOutputFormat>opencover</CoverletOutputFormat>

        <PolySharpIncludeRuntimeSupportedAttributes>true</PolySharpIncludeRuntimeSupportedAttributes>
        <PolySharpUsePublicAccessibilityForGeneratedTypes>true</PolySharpUsePublicAccessibilityForGeneratedTypes>
    </PropertyGroup>

    <ItemGroup>
        <Content Include="..\Directory.Build.props">
            <Link>%(Filename)%(Extension)</Link>
        </Content>
        <Content Include="..\Defs\**\*.xml">
            <Link>Defs\%(RecursiveDir)%(Filename)%(Extension)</Link>
        </Content>
        <Content Include="..\Languages\**\Keyed\*.xml">
            <Link>Languages\%(RecursiveDir)%(FileName)%(Extension)</Link>
        </Content>
        <Content Include="..\Languages\**\DefInjected\**\*.xml">
            <Link>Languages\%(RecursiveDir)%(FileName)%(Extension)</Link>
        </Content>
    </ItemGroup>

    <ItemGroup Label="Runtime">
        <PackageReference Include="Lib.Harmony" Version="2.3.3" ExcludeAssets="runtime" />
        <PackageReference Include="Microsoft.NETCore.Platforms" Version="7.0.4" />
        <PackageReference Include="Microsoft.NETCore.Portable.Compatibility" Version="1.0.1" />
        <PackageReference Include="PolySharp"
            Version="1.14.1+a7a92a9ddd050275c91c42b711d22cb41c3fbf3d" />
    </ItemGroup>

    <ItemGroup Label="Development">
        <PackageReference Include="ILRepack" Version="2.0.33" GeneratePathProperty="true">
            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
            <PrivateAssets>all</PrivateAssets>
        </PackageReference>
        <PackageReference Include="Krafs.Publicizer" Version="2.2.1">
            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
            <PrivateAssets>all</PrivateAssets>
        </PackageReference>
        <PackageReference Include="Microsoft.NETFramework.ReferenceAssemblies.net472"
            Version="1.0.3">
            <PrivateAssets>all</PrivateAssets>
            <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
        </PackageReference>
    </ItemGroup>

    <ItemGroup>
        <Reference Include="Newtonsoft.Json">
            <HintPath>..\External\Newtonsoft.Json.dll</HintPath>
        </Reference>
        <Reference Include="netstandard">
            <Private>true</Private>
        </Reference>
    </ItemGroup>

    <ItemGroup>
        <Compile Include="CityHash.cs" />
        <Compile Include="CompressedDictionary.cs" />
        <Compile Include="LogTool.cs" />
        <Compile Include="Main.cs" />
        <Compile Include="Patches.cs" />
        <Compile Include="Settings.cs" />
        <Compile Include="Tasks.cs" />
        <Compile Include="Tools.cs" />
        <Compile Include="UX.cs" />
    </ItemGroup>

    <Target Name="CheckConfiguration" BeforeTargets="Build">
        <PropertyGroup>
            <RimWorldVersion>$(MSBuildProjectName)</RimWorldVersion>
        </PropertyGroup>

        <Message Text="RimWorld version: $(RimWorldVersion)" Importance="high" />
        <Message Text="Configuration: $(Configuration)" Importance="high" />
    </Target>

    <ItemGroup>
        <Publicize Include="Assembly-CSharp;0Harmony;AICore" />
        <DoNotPublicize
            Include="0Harmony:System.Runtime.CompilerServices.IgnoresAccessChecksToAttribute;AICore:System.Runtime.CompilerServices.IgnoresAccessChecksToAttribute" />
    </ItemGroup>

    <Target Name="CopyPublicized" AfterTargets="Build">
        <ItemGroup>
            <CustomAssemblies Include="$(IntermediateOutputPath)PublicizedAssemblies\**\*.dll" />
        </ItemGroup>

        <Copy SourceFiles="@(CustomAssemblies)" DestinationFolder="$(OutputPath)\shared"
            SkipUnchangedFiles="true" />
    </Target>

    <Target Name="DeleteNative" AfterTargets="CopyPublicized">
        <ItemGroup>
            <NativeItems
                Include="grpc_csharp_ext.x64.dll;grpc_csharp_ext.x86.dll;libgrpc_csharp_ext.x64.dylib;libgrpc_csharp_ext.x64.so"
            />
        </ItemGroup>
        <Delete Files="@(NativeItems -> '$(OutputPath)%(Filename)%(Extension)')" />
    </Target>

    <Target Name="DeleteAICore" AfterTargets="DeleteNative">
        <ItemGroup>
            <AICoreItems Include="AICore.dll;AICore.pdb;AICore.xml" />
        </ItemGroup>
        <Delete Files="@(AICoreItems -> '$(OutputPath)%(Filename)%(Extension)')" />
    </Target>

    <Target Name="GatherInputs" AfterTargets="DeleteAICore">
        <PropertyGroup Label="ILRepackOutput">
            <ILRepackOutputPath>..\..\..\$(RimWorldVersion)\Assemblies\</ILRepackOutputPath>
        </PropertyGroup>
        <PropertyGroup Label="ILRepackItems">
            <ILRepackExe>$(PkgILRepack)\tools\ILRepack.exe</ILRepackExe>
            <ILRepackInputPrimary>$(AssemblyName).dll</ILRepackInputPrimary>
            <ILRepackOutput>$(ILRepackOutputPath)$(AssemblyName).dll</ILRepackOutput>
        </PropertyGroup>
        <ItemGroup Label="ILRepackLists">
            <ILRepackExtra Include="log;wildcards;parallel;target:library" />
            <ILRepackInput Include="$(OutputPath)\*.dll" />
            <ILRepackInput Remove="$(OutputPath)$(AssemblyName).dll" />
            <ILRepackLib Include="$(OutputPath)\shared" />
        </ItemGroup>
    </Target>

    <Target Name="Repack" AfterTargets="GatherInputs"
        Inputs="$(ILRepackExe);@(ILRepackInput);@(ILRepackLib);$(ILRepackOutputPath);$(ILRepackOutput)"
        Outputs="$(ILRepackOutput)">
        <PropertyGroup Label="ILRepackArguments">
            <ILRepackExtraArguments>@(ILRepackExtra->'/%(Identity)', ' ')</ILRepackExtraArguments>
            <ILRepackLibrariesArgument>@(ILRepackLib->'/lib:"%(FullPath)"', ' ')</ILRepackLibrariesArgument>
            <ILRepackOutArgument>/out:$(ILRepackOutput)</ILRepackOutArgument>
            <ILRepackInArgument>@(ILRepackInput->'"%(FileName)%(Extension)"', ' ')</ILRepackInArgument>
        </PropertyGroup>
        <Exec
            Command="$(ILRepackExe) $(ILRepackExtraArguments) $(ILRepackLibrariesArgument) $(ILRepackOutArgument) $(ILRepackInputPrimary) $(ILRepackInArgument)"
            WorkingDirectory="$(OutputPath)" ConsoleToMSBuild="True" />

    </Target>

    <Target Name="CopyDestination" AfterTargets="Repack">
        <Copy Condition="Exists('$(ProjectRuntimeConfigFilePath)')"
            SourceFiles="$(ProjectRuntimeConfigFilePath)"
            DestinationFiles="$(ILRepackOutputPath)$(ProjectRuntimeConfigFileName)"
            SkipUnchangedFiles="True" />
    </Target>

    <Target Name="PostBuildAction" AfterTargets="CopyDestination">
        <XmlPoke XmlInputPath="$(MSBuildProjectDirectory)\..\About\About.xml"
            Query="//ModMetaData/modVersion" Value="$(ModVersion)" />
        <Message Text="New version: $(ModVersion)" />
    </Target>

    <Target Name="ZipMod" AfterTargets="PostBuildAction">

        <PropertyGroup>
            <BuildDir>..\Build\</BuildDir>
            <Dir15>..\1.5\</Dir15>
        </PropertyGroup>

        <ItemGroup>
            <Copy15 Include="..\1.5\**" />
            <CopyAbout Include="..\About\**" />
            <CopyLicense Include="..\LICENSE" />
            <CopyReadme Include="..\README.md" />
        </ItemGroup>

        <MakeDir Directories="$(BuildDir)" Condition="!Exists('%(BuildDir.Identity)')" />

        <Copy SourceFiles="@(Copy15)"
            DestinationFolder="$(BuildDir)\1.5\%(RecursiveDir)" />
        <Copy SourceFiles="@(CopyAbout)"
            DestinationFolder="$(BuildDir)\About\%(RecursiveDir)" />
        <Copy SourceFiles="@(CopyLicense)"
            DestinationFolder="$(BuildDir)" />
        <Copy SourceFiles="@(CopyReadme)"
            DestinationFolder="$(BuildDir)" />

        <ZipDirectory SourceDirectory="$(BuildDir)"
            DestinationFile="$(BuildDir)\..\$(ModFileName).zip" Overwrite="true" />

        <RemoveDir Directories="$(BuildDir)" />
        <RemoveDir Directories="$(Dir15)" />

    </Target>

    <Target Name="PostClean" AfterTargets="Clean">
        <!-- obj -->
        <!-- <RemoveDir Directories="$(BaseIntermediateOutputPath)" /> -->
        <!-- bin -->
        <RemoveDir Directories="$(BaseOutputPath)" />
    </Target>

</Project>